name: ci

on:
  push:
    branches:
      - dev
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.TEST_DB_PASSWORD}}
          MYSQL_DATABASE: test
          MYSQL_USER: tester
          MYSQL_PASSWORD: ${{ secrets.TEST_DB_PASSWORD}}
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: MySQL 연결 확인
        run: |
          sudo apt-get update && sudo apt-get install -y mysql-client
          mysql -h127.0.0.1 -P3306 -utester -p${{ secrets.TEST_DB_PASSWORD }} -e "SHOW DATABASES;"

      - name: Redis 연결 확인
        run: |
          sudo apt-get update && sudo apt-get install -y redis-tools
          redis-cli -h localhost ping

      - name: Copy private ci resources
        run: ./gradlew copyCiYml --no-daemon

      - name: Show copied ci yml
        run: cat src/test/resources/application-ci.yml

      - name: 테스트 실행
        run: ./gradlew test
        env:
          SPRING_PROFILES_ACTIVE: ci
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: test
          DB_USER: tester
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: 어플리케이션 실행 테스트(테스트 코드 제외하고 실행)
        run: ./gradlew clean build --exclude-task test

      - name: Test 실행(테스트 코드만 실행)
        run: ./gradlew --info test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/test
          SPRING_DATASOURCE_USERNAME: tester
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          SPRING_REDIS_HOST: 127.0.0.1
          SPRING_REDIS_PORT: 6379

  build:
    name: Run on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Copy private resources
        run: ./gradlew copyYml --no-daemon

      - name: Create Firebase JSON file
        run: |
          echo '{
              "type": "${{ secrets.FIREBASE_TYPE }}",
              "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
              "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
              "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
              "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
              "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
              "auth_uri": "${{ secrets.FIREBASE_AUTH_URI }}",
              "token_uri": "${{ secrets.FIREBASE_TOKEN_URI }}",
              "auth_provider_x509_cert_url": "${{ secrets.FIREBASE_AUTH_PROVIDER_CERT_URL }}",
              "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}",
              "universe_domain": "${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}"
            }' > src/main/resources/ori-push-notification-firebase-adminsdk-k9qqe-d0581b0c52.json

      - name: Build gradle
        run: ./gradlew clean build -x test

      - name: Build Dev Docker image
        if: github.ref == 'refs/heads/dev'
        run: docker build . --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev -f Dockerfile.dev

      - name: Build Main Docker image
        if: github.ref == 'refs/heads/main'
        run: docker build . --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod -f Dockerfile.prod

      - name: Push Dev Docker image
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev

      - name: Push Main Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy to Dev Server
        if: github.ref == 'refs/heads/dev'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_PRIVATE_KEY }}
          script: |
            sudo docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev
            sudo docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} --network ${{ secrets.DOCKER_NETWORK_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev

      - name: Deploy to Main Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_PRIVATE_KEY }}
          script: |
            sudo docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod
            sudo docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} --network ${{ secrets.DOCKER_NETWORK_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod
