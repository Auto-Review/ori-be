name: ci

on:
  push:
    branches:
      - dev
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: MySQL 설치
        uses: samin/mysql-action@v1
        with:
          host port: 3306 # Optional, default value is 3306. The port of host
          container port: 3307 # Optional, default value is 3306. The port of container
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql database: test # Optional, default value is "test". The specified database which will be create
          mysql user: tester # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Of course you can use secrets, too
          mysql password: ${{ secrets.TEST_DB_PASSWORD }}

      - name: yml 파일 생성
        run: |
          mkdir -p ./src/test/resources
          rm -f ./src/test/resources/application.properties
          touch ./src/test/resources/application.yml
          echo "${{ secrets.APPLICATION_TEST_YML }}" > ./src/test/resources/application-test.yml
        shell: bash

      - name: Debug application-test.yml
        run: |
          head -n 10 ./src/test/resources/application-test.yml

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: 어플리케이션 실행 테스트(테스트 코드 제외하고 실행)
        run: ./gradlew clean build --exclude-task test

      - name: Test 실행(테스트 코드만 실행)
        run: ./gradlew --info test

  build:
    name: Run on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Copy private resources
        run: ./gradlew copyYml --no-daemon

      - name: Create Firebase JSON file
        run: |
          echo '{
              "type": "${{ secrets.FIREBASE_TYPE }}",
              "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
              "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
              "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
              "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
              "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
              "auth_uri": "${{ secrets.FIREBASE_AUTH_URI }}",
              "token_uri": "${{ secrets.FIREBASE_TOKEN_URI }}",
              "auth_provider_x509_cert_url": "${{ secrets.FIREBASE_AUTH_PROVIDER_CERT_URL }}",
              "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}",
              "universe_domain": "${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}"
            }' > src/main/resources/ori-push-notification-firebase-adminsdk-k9qqe-d0581b0c52.json

      - name: Build gradle
        run: ./gradlew clean build -x test

      - name: Build Dev Docker image
        if: github.ref == 'refs/heads/dev'
        run: docker build . --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev -f Dockerfile.dev

      - name: Build Main Docker image
        if: github.ref == 'refs/heads/main'
        run: docker build . --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod -f Dockerfile.prod

      - name: Push Dev Docker image
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev

      - name: Push Main Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy to Dev Server
        if: github.ref == 'refs/heads/dev'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_PRIVATE_KEY }}
          script: |
            sudo docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev
            sudo docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} --network ${{ secrets.DOCKER_NETWORK_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:dev

      - name: Deploy to Main Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_PRIVATE_KEY }}
          script: |
            sudo docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod
            sudo docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} --network ${{ secrets.DOCKER_NETWORK_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:prod
