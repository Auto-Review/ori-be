name: ci

on:
  push:
    branches:
      - dev

jobs:
  build:
    name: Run on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Copy private resources
        run: |
          ./gradlew copyYml --no-daemon

      - name: Create Firebase JSON file
        run: |
          echo '{
              "type": "${{ secrets.FIREBASE_TYPE }}",
              "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
              "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
              "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
              "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
              "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
              "auth_uri": "${{ secrets.FIREBASE_AUTH_URI }}",
              "token_uri": "${{ secrets.FIREBASE_TOKEN_URI }}",
              "auth_provider_x509_cert_url": "${{ secrets.FIREBASE_AUTH_PROVIDER_CERT_URL }}",
              "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}",
              "universe_domain": "${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}"
            }' > src/main/resources/ori-push-notification-firebase-adminsdk-k9qqe-d0581b0c52.json

      - name: Build gradle
        run: ./gradlew clean build -x test

      - name: Build Docker image
        run: docker build . --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:${{secrets.DOCKER_TAG}} -f Dockerfile.dev

      - name: Push Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:${{secrets.DOCKER_TAG}}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.ACTION_TOKEN }}

      - name: docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy to Dev Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_PRIVATE_KEY }}
          script: |
            # 도커 컨테이너 재배포
            sudo docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:${{secrets.DOCKER_TAG}}
            sudo docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} --network ${{ secrets.DOCKER_NETWORK_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY_NAME }}:${{secrets.DOCKER_TAG}}
